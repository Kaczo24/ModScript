Math:
	+ : addition
	- : substraction
	* : multiplication
	/ : division
	^ : power
	% : modulo

Primitive Data Types:
	(-)####.#### : Number(float) where # is digit
	(-)######### : Number(int) where # is digit
	"XXXXXXX" : String where X is character
	[D, D, D] : List where D is Data
	true|false: boolean

To asign a new variable use:
	let IDENTIFIER = {expresion};

To edit a variable use:
	IDENTIFIER = {expresion}
	IDENTIFIER += {expresion};
	IDENTIFIER -= {expresion};
	IDENTIFIER *= {expresion};
	IDENTIFIER /= {expresion};
	IDENTIFIER ^= {expresion};
	IDENTIFIER %= {expresion};
	IDENTIFIER++ : increment returning previous
	++IDENTIFIER : increment returning current
	IDENTIFIER-- : decrement returning previous
	--IDENTIFIER : decrement returning current

Comparison operators:
	== : equals
	!= : not equals
	< : less then
	<= : less then or equals
	> : more then
	>= : more then or equals
	
Boolean operators:
	&& : and
	|| : or
	!  : not

String operators:
	+ : concatination
	STRING.length : length of the STRING as int
	STRING[index] : index'th char in the STRING

List operators:
	+ : concatination
	LIST.length : length of the LIST as int
	LIST[index] : data in LIST at index

Function definition:
	function IDENTIFIER(arg1Name, arg2Name ...)
		{ code of definition } | => line of result;
	function(arg1Name, arg2Name ...)			as anonymous primitive
		{ code of definition } | => line of result;
	{ code of definition }						as a returned exprestion

If statement:
	if (boolean)
		{ code to execute } | line to execute;

While statement:
	while (boolean)
		{ code to execute } | line to execute;

For statement:
	for (statement done once; boolean; statement done after cycle)
		{ code to execute } | line to execute;


Running file program:
	run {expresion}; : if {expresion} is a string, copies and runs the content of the file named {expresion} in the place of this statement

Class-like data structure:
	function IDENTIFIER( Constructor parameters )
	{
		public let IDENTIFIER = {expresion}; : public variable
		public function IDENTIFIER() { } : public function
		CODE OF CONSTRUCTION
		return this; : return of created object
	}

Protopical inhatitance : 
	IDENTIFIER1 << IDENTIFIER2 = {expresion}; : creates a public variable in ID1, named ID2 with default value of {expresion} 



Predefined Functions
	Global
		Print(arg0) : prints arg0 to console
		Printl(arg0) : prints arg0 to console and ends the line
		Input() : requests a line of text from console, and returns it
		InputN() : requests a number from console, and returns it

		Sqrt(arg0) : returns a square root of arg0

		GetType(arg0) : returns a string of the name of type of arg0
		ParseNumber(arg0) : tries to parse arg0(text) to number, and returns it

	File()
		File.ReadText(arg0) : returns all text in file named arg0
		File.ReadLines(arg0) : returns all lines as a list in file named arg0
		File.WriteText(arg0, arg1) : writes arg1 to file named arg0
		File.WriteLines(arg0, arg1) : writes arg1(list of lines) to file named arg0

		
	
	String(arg0) : returns a string version of the arg0
		V.Contains(arg0) : test for occurance of arg0 in V

	List() : returns an empty list
		V.Contains(arg0) : test for occurance of arg0 in V