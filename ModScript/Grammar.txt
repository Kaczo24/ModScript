statements		: (statement NLINE)*

statement		: KEYWORD:return expr?
				: KEYWORD:break
				: KEYWORD:continue
				: KEYWORD:run expr(type STRING)
				: while-expr
				: if-expr
				: for-expr
				: expr

if-expr			: KEYWORD:IF LPAR expr RPAR body-statement
				  (KEYWORD:ELSE body-statement)?

while-expr		: KEYWORD:WHILE LPAR expr RPAR body-statement

for-expr		: KEYWORD:FOR LPAR expr ENDL expr ENDL expr RPAR body-statement

body-statement	: ((LBRACK statements RBRACK)|(statement NLINE))

expr			: KEYWORD:let INDETIFIER (EQUAL expr)?
				: KEYWORD:public KEYWORD:let INDETIFIER (EQUAL expr)?
				: KEYWORD:public func-def
				: INDETIFIER (ADD|SUB|MULT|DIV|POW|MOD)?-EQUAL expr
				: INDETIFIER MOVL INDETIFIER (EQUAL expr)?
				: call LSQBR NUMBER RSQBR (ADD|SUB|MULT|DIV|POW|MOD)?-EQUAL expr
				: LBRACK statements RBRACK
				: comp-expr ((AND|OR) comp-expr)*


comp-expr		: NOT comp-expr
				: aryth-expr ((EE|NE|LT|GT|LTE|GTE) aryth-expr)*


arith-expr		: term ((ADD|SUB) term)*


term			: factor ((MULT|DIV|MOD) factor)*


factor			: (ADD|SUB) factor
				: power


power			: mono-mod (POW factor)*

mono-mod		: (INC|DEC) call
				: call (INC|DEC)?
				

call			: call LSQBR NUMBER RSQBR
				: call LPAR (expr (COMMA expr)*)? RPAR
				: call DOT INDETIFIER
				: atom


atom			: VALUE|INDETIFIER
				: list-expr
				: LPAR expr RPAR
				: func-def


list-expr		: LSQBR (expr (COMMA expr)*)? RSQBR


func-def		: KEYWORD:function INDETIFIER? LPAR (INDETIFIER (COMMA INDETIFIER)*)? RPAR
				  (ARROW expr) | (LBRACK statements RBRACK)





ANY (==|!=) ANY
NUMBER (+|-|*|/|^|<|<=|>|>=) NUMBER
STR (+) ANY
ANY (+) STR
BOOL (&& | ||) BOOL
LIST (+) LIST